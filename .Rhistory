geom_hline(yintercept = 0, linetype="dashed", color = "black") +
xlab("Days post infection (dpi)")+
scale_y_continuous(name = "Residuals\n (Genome copies/g Faeces)")+
theme_bw()+
theme(legend.position="bottom")+
scale_fill_discrete(name="Infection\nCondition",
breaks=c("E64_Prim", "E64_Sec", "E88_Prim","E88_Sec"),
labels=c("E. ferrisi Primary", "E. ferrisi Secondary", "E. falciformis Primary", "E. falciformis Secondary"))
sdt.nozero%>%
group_by(Variable,dpi) %>%
summarise(residualsM1_mean = mean(residualsM1,rm.na=TRUE))%>%
inner_join(sdt.nozero, by=c( "dpi","Variable"))%>%
mutate(residualim= 0)%>%
ggplot(aes(x = dpi, y = residualsM1, color=factor(Variable)))+
scale_color_manual(legend_title2, values=c("#3490DC", "#53C0B5", "#F3993E","#E33530"))+
scale_fill_manual(legend_title2, values=c("#3490DC", "#53C0B5", "#F3993E","#E33530"))+
geom_point(aes(x = dpi, y = residualsM1_mean,fill=Variable),
size = 5,
shape=21,stroke=1,#alpha = .25,
position = position_dodge(width = 0.75)) +
geom_jitter(width = 0.1, shape=21, size=2.5, alpha= 0.75,aes(fill=Variable))+
#stat_summary(fun.y = mean(na.omit(residualsM1), geom = "point", size = 5, aes(colour = Variable), position = position_dodge(0.75)) +
geom_linerange(aes(x = dpi, ymin = residualim, ymax = residualsM1_mean, colour = Variable),
size = 1, position = position_dodge(width = 0.75)) +
geom_hline(yintercept = 0, linetype="dashed", color = "black") +
xlab("Days post infection (dpi)")+
scale_y_continuous(name = "Residuals\n (Genome copies/g Faeces)")+
theme_bw()+
theme(legend.position="bottom")+
scale_fill_discrete(breaks=c("E64_Prim", "E64_Sec", "E88_Prim","E88_Sec"),
labels=c("E. ferrisi Primary", "E. ferrisi Secondary", "E. falciformis Primary", "E. falciformis Secondary"))
##my plot residual
sdt.nozero%>%
group_by(Variable,dpi) %>%
summarise(residualsM1_mean = mean(residualsM1,rm.na=TRUE))%>%
inner_join(sdt.nozero, by=c( "dpi","Variable"))%>%
mutate(residualim= 0)%>%
ggplot(aes(x = dpi, y = residualsM1, color=factor(Variable)))+
scale_color_manual(legend_title2, values=c("#3490DC", "#53C0B5", "#F3993E","#E33530"))+
scale_fill_manual(legend_title2, values=c("#3490DC", "#53C0B5", "#F3993E","#E33530"))+
geom_point(aes(x = dpi, y = residualsM1_mean,fill=Variable),
size = 5,
shape=21,stroke=1,#alpha = .25,
position = position_dodge(width = 0.75)) +
geom_jitter(width = 0.1, shape=21, size=2.5, alpha= 0.75,aes(fill=Variable))+
#stat_summary(fun.y = mean(na.omit(residualsM1), geom = "point", size = 5, aes(colour = Variable), position = position_dodge(0.75)) +
geom_linerange(aes(x = dpi, ymin = residualim, ymax = residualsM1_mean, colour = Variable),
size = 1, position = position_dodge(width = 0.75)) +
geom_hline(yintercept = 0, linetype="dashed", color = "black") +
xlab("Days post infection (dpi)")+
scale_y_continuous(name = "Residuals\n (Genome copies/g Faeces)")+
theme_bw()+
theme(legend.position="bottom")
#colores<- c("0"="#EE6C9B","4"="#9561E2", "5"= "#3490DC","6"="#6574CD", "7"= "#53C0B5", "8"= "#58C172",
#           "9" = "#FFED4F", "10"= "#F3993E", "11" = "#E33530")
#colores<- c("0"="#E25151","4"="#E161AA", "5"= "#D84B94","6"="#9C88F8", "7"= "#8D51E7", "8"= "#63DBFA",
#           "9" = "#237EE0", "10"= "#9BD33B", "11" = "#489228")
##my plot
sdt.nozero%>%
ggplot(aes(OPG, Genome_copies_gFaeces))+
geom_smooth(method = lm,color= "black")+
geom_point(aes(fill = factor(dpi), shape = Variable), size=4.0,shape=21,stroke=0.35,color="#424242")+
scale_fill_manual(values = colores)+
labs(tag= "a", fill= "DPI")+
scale_x_log10(name = "log10 (Oocysts/g Faeces) \n (Oocyst counts)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
scale_y_log10(name = "log10 (Genome copies/g Faeces)  \n (Eimeria DNA)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
theme_bw()+
annotation_logticks()
#colores<- c("0"="#EE6C9B","4"="#9561E2", "5"= "#3490DC","6"="#6574CD", "7"= "#53C0B5", "8"= "#58C172",
#           "9" = "#FFED4F", "10"= "#F3993E", "11" = "#E33530")
#colores<- c("0"="#E25151","4"="#E161AA", "5"= "#D84B94","6"="#9C88F8", "7"= "#8D51E7", "8"= "#63DBFA",
#           "9" = "#237EE0", "10"= "#9BD33B", "11" = "#489228")
##my plot
sdt.nozero%>%
ggplot(aes(OPG, Genome_copies_gFaeces, shape = Variable))+
geom_smooth(method = lm,color= "black")+
geom_point(aes(fill = factor(dpi), shape = Variable), size=4.0,shape=21,stroke=0.35,color="#424242")+
scale_fill_manual(values = colores)+
labs(tag= "a", fill= "DPI")+
scale_x_log10(name = "log10 (Oocysts/g Faeces) \n (Oocyst counts)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
scale_y_log10(name = "log10 (Genome copies/g Faeces)  \n (Eimeria DNA)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
theme_bw()+
annotation_logticks()
#colores<- c("0"="#EE6C9B","4"="#9561E2", "5"= "#3490DC","6"="#6574CD", "7"= "#53C0B5", "8"= "#58C172",
#           "9" = "#FFED4F", "10"= "#F3993E", "11" = "#E33530")
#colores<- c("0"="#E25151","4"="#E161AA", "5"= "#D84B94","6"="#9C88F8", "7"= "#8D51E7", "8"= "#63DBFA",
#           "9" = "#237EE0", "10"= "#9BD33B", "11" = "#489228")
##my plot
sdt.nozero%>%
ggplot(aes(OPG, Genome_copies_gFaeces, shape = Variable))+
geom_smooth(method = lm,color= "black")+
geom_point(aes(fill = factor(dpi), shape = Variable), size=4.0,stroke=0.35,color="#424242")+
scale_fill_manual(values = colores)+
labs(tag= "a", fill= "DPI")+
scale_x_log10(name = "log10 (Oocysts/g Faeces) \n (Oocyst counts)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
scale_y_log10(name = "log10 (Genome copies/g Faeces)  \n (Eimeria DNA)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
theme_bw()+
annotation_logticks()
#colores<- c("0"="#EE6C9B","4"="#9561E2", "5"= "#3490DC","6"="#6574CD", "7"= "#53C0B5", "8"= "#58C172",
#           "9" = "#FFED4F", "10"= "#F3993E", "11" = "#E33530")
#colores<- c("0"="#E25151","4"="#E161AA", "5"= "#D84B94","6"="#9C88F8", "7"= "#8D51E7", "8"= "#63DBFA",
#           "9" = "#237EE0", "10"= "#9BD33B", "11" = "#489228")
##my plot
sdt.nozero%>%
ggplot(aes(OPG, Genome_copies_gFaeces, shape = Variable, fill = dpi))+
geom_smooth(method = lm,color= "black")+
geom_point(aes(fill = factor(dpi), shape = Variable), size=4.0,stroke=0.35,color="#424242")+
scale_fill_manual(values = colores)+
labs(tag= "a", fill= "DPI")+
scale_x_log10(name = "log10 (Oocysts/g Faeces) \n (Oocyst counts)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
scale_y_log10(name = "log10 (Genome copies/g Faeces)  \n (Eimeria DNA)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
theme_bw()+
annotation_logticks()
#colores<- c("0"="#EE6C9B","4"="#9561E2", "5"= "#3490DC","6"="#6574CD", "7"= "#53C0B5", "8"= "#58C172",
#           "9" = "#FFED4F", "10"= "#F3993E", "11" = "#E33530")
#colores<- c("0"="#E25151","4"="#E161AA", "5"= "#D84B94","6"="#9C88F8", "7"= "#8D51E7", "8"= "#63DBFA",
#           "9" = "#237EE0", "10"= "#9BD33B", "11" = "#489228")
##my plot
sdt.nozero%>%
ggplot(aes(OPG, Genome_copies_gFaeces))+
geom_smooth(method = lm,color= "black")+
geom_point(aes(fill = factor(dpi), shape = Variable), size=4.0,stroke=0.35,color="#424242")+
scale_fill_manual(values = colores)+
labs(tag= "a", fill= "DPI")+
scale_x_log10(name = "log10 (Oocysts/g Faeces) \n (Oocyst counts)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
scale_y_log10(name = "log10 (Genome copies/g Faeces)  \n (Eimeria DNA)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
theme_bw()+
annotation_logticks()
#colores<- c("0"="#EE6C9B","4"="#9561E2", "5"= "#3490DC","6"="#6574CD", "7"= "#53C0B5", "8"= "#58C172",
#           "9" = "#FFED4F", "10"= "#F3993E", "11" = "#E33530")
#colores<- c("0"="#E25151","4"="#E161AA", "5"= "#D84B94","6"="#9C88F8", "7"= "#8D51E7", "8"= "#63DBFA",
#           "9" = "#237EE0", "10"= "#9BD33B", "11" = "#489228")
##my plot
sdt.nozero%>%
ggplot(aes(OPG, Genome_copies_gFaeces))+
geom_smooth(method = lm,color= "black")+
geom_point(aes(fill = factor(dpi), shape = Variable), size=4.0,stroke=0.35,color="#424242")+
scale_fill_manual(values = colores)+
scale_shape_manual(values = c(24, 25, 21,22))+
labs(tag= "a", fill= "DPI")+
scale_x_log10(name = "log10 (Oocysts/g Faeces) \n (Oocyst counts)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
scale_y_log10(name = "log10 (Genome copies/g Faeces)  \n (Eimeria DNA)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
theme_bw()+
annotation_logticks()
sdt <- E64_total
sdt$OPG[sdt$labels == "E57aDMV"] <- NA
sdt$OPG[sdt$labels == "E57byFPV"] <- NA
sdt%>%
filter(!(OPG== 0))%>%
filter(!(Genome_copies_gFaeces== 0))-> sdt.nozero
##Model 1: Genome copies/g faeces modeled by OPG
DNAbyOPG <- lm(log10(Genome_copies_gFaeces)~(log10(OPG)),
data = sdt.nozero, na.action = na.exclude)
summary(DNAbyOPG)
### Plot and extract estimates
require(sjPlot)
sdt.nozero$predictedM1 <- predict(DNAbyOPG)   # Save the predicted values
sdt.nozero$residualsM1 <- residuals(DNAbyOPG) # Save the residual values
##Assign the colors for dpi and keep consistency with previous plots
colores<- c("0"="#FFED4F","4"="#F3993E", "5"= "#E33530","6"="#EE6C9B", "7"= "#9561E2", "8"= "#6574CD",
"9" = "#3490DC", "10"= "#53C0B5", "11" = "#58C172")
#colores<- c("0"="#EE6C9B","4"="#9561E2", "5"= "#3490DC","6"="#6574CD", "7"= "#53C0B5", "8"= "#58C172",
#           "9" = "#FFED4F", "10"= "#F3993E", "11" = "#E33530")
#colores<- c("0"="#E25151","4"="#E161AA", "5"= "#D84B94","6"="#9C88F8", "7"= "#8D51E7", "8"= "#63DBFA",
#           "9" = "#237EE0", "10"= "#9BD33B", "11" = "#489228")
##my plot
sdt.nozero%>%
ggplot(aes(OPG, Genome_copies_gFaeces))+
geom_smooth(method = lm,color= "black")+
geom_point(aes(fill = factor(dpi), shape = Variable), size=4.0,stroke=0.35,color="#424242")+
scale_fill_manual(values = colores)+
scale_shape_manual(values = c(24, 25, 21,22))+
labs(tag= "a", fill= "DPI")+
scale_x_log10(name = "log10 (Oocysts/g Faeces) \n (Oocyst counts)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
scale_y_log10(name = "log10 (Genome copies/g Faeces)  \n (Eimeria DNA)",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
theme_bw()+
annotation_logticks()
sdt.nozero <- subset(sdt.nozero, !(dpi %in% c(0)))
legend_title2 <- "Infection\nCondition"
##my plot residual
sdt.nozero%>%
group_by(Variable,dpi) %>%
summarise(residualsM1_mean = mean(residualsM1,rm.na=TRUE))%>%
inner_join(sdt.nozero, by=c( "dpi","Variable"))%>%
mutate(residualim= 0)%>%
ggplot(aes(x = dpi, y = residualsM1, color=factor(Variable)))+
scale_color_manual(legend_title2, values=c("#3490DC", "#53C0B5", "#F3993E","#E33530"))+
scale_fill_manual(legend_title2, values=c("#3490DC", "#53C0B5", "#F3993E","#E33530"))+
geom_point(aes(x = dpi, y = residualsM1_mean,fill=Variable),
size = 5,
shape=21,stroke=1,#alpha = .25,
position = position_dodge(width = 0.75)) +
geom_jitter(width = 0.1, shape=21, size=2.5, alpha= 0.75,aes(fill=Variable))+
#stat_summary(fun.y = mean(na.omit(residualsM1), geom = "point", size = 5, aes(colour = Variable), position = position_dodge(0.75)) +
geom_linerange(aes(x = dpi, ymin = residualim, ymax = residualsM1_mean, colour = Variable),
size = 1, position = position_dodge(width = 0.75)) +
geom_hline(yintercept = 0, linetype="dashed", color = "black") +
xlab("Days post infection (dpi)")+
scale_y_continuous(name = "Residuals\n (Genome copies/g Faeces)")+
theme_bw()+
theme(legend.position="bottom")
library(ggeffects)
pred <- ggpredict(modred_red_1,terms=c("Genome_copies_gFaeces","OPG","Variable"), ci.lvl = NA,add.data = TRUE)
ggplot(pred, aes(x = x, y = predicted, colour = group)) +
stat_smooth(method = "lm", se = FALSE) +
facet_wrap(~facet) +
#geom_point(aes())+ #add raw data argument
labs(
y = get_y_title(pred),
x = get_x_title(pred),
colour = get_legend_title(pred)
)
plot(pred, rawdata = TRUE, dot.alpha = 0.9)
methods(plot)
View(myData)
View(datMaxALL)
datMaxALL[datMaxALL$EH_ID != "LM0179" , ]
datMaxALL[datMaxALL$EH_ID != "LM0181" , ]
datMaxALL<- datMaxALL[datMaxALL$EH_ID != "LM0179" , ]
datMaxALL<-datMaxALL[datMaxALL$EH_ID != "LM0181" , ]
# ----------------------------
# Can we predict weight loss by a combination of OPG and fecDNA?
library(lmtest)
modNull = lm(weightloss ~ 1, data = datMaxALL)
modFullest = lm(weightloss ~ OPG * Genome_copies_gFaeces*Variable, data = datMaxALL)
summary(modFullest)
modFull_red1 = lm(weightloss ~ OPG * Genome_copies_gFaeces+Variable, data = datMaxALL)
summary(modFull_red1)
modFull_red2 = lm(weightloss ~ OPG + Genome_copies_gFaeces*Variable, data = datMaxALL)
summary(modFull_red2)
modFull_red3 = lm(weightloss ~ OPG * Variable + Genome_copies_gFaeces, data = datMaxALL)
summary(modFull_red3)
anova(modFullest,modFull_red1)
anova(modFullest,modFull_red2)
anova(modFullest,modFull_red3)
AIC(modFullest, modFull_red1, modFull_red2, modFull_red3)
#We go on comapring against modFUll_red3
modred_red_1 = lm(weightloss ~ OPG + Variable + Genome_copies_gFaeces, data = datMaxALL)
summary(modred_red_1)
anova(modFull_red3, modred_red_1)
modOPG = lm(weightloss ~ OPG + Variable, data = datMaxALL)
summary(modOPG)
modOPG_Int = lm(weightloss ~ OPG * Variable, data = datMaxALL)
summary(modOPG_Int)
modGenome = lm(weightloss ~  Genome_copies_gFaeces + Variable, data = datMaxALL)
summary(modGenome)
modGenome_Int = lm(weightloss ~  Genome_copies_gFaeces * Variable, data = datMaxALL)
summary(modGenome_Int)
anova(modred_red_1, modOPG)
anova(modred_red_1, modGenome)
AIC(modOPG, modGenome, modOPG_Int,modGenome_Int,modred_red_1)
#modred_red_1 is the best
library(ggeffects)
pred <- ggpredict(modred_red_1,terms=c("Genome_copies_gFaeces","OPG","Variable"), ci.lvl = NA,add.data = TRUE)
ggplot(pred, aes(x = x, y = predicted, colour = group)) +
stat_smooth(method = "lm", se = FALSE) +
facet_wrap(~facet) +
#geom_point(aes())+ #add raw data argument
labs(
y = get_y_title(pred),
x = get_x_title(pred),
colour = get_legend_title(pred)
)
plot(pred, rawdata = TRUE, dot.alpha = 0.9)
methods(plot)
plot(pred, rawdata = TRUE, dot.alpha = 0.9)
datMaxALL<- datMaxALL[datMaxALL$EH_ID != "LM0179" , ]
datMaxALL<-datMaxALL[datMaxALL$EH_ID != "LM0181" , ]
datMaxALL<-datMaxALL[datMaxALL$EH_ID != "LM0244" , ]
# ----------------------------
# Q2(a): Does DNA predict a health effect on the host “overall” (e.g. maximum)?
# ----------------------------
# Can we predict weight loss by a combination of OPG and fecDNA?
library(lmtest)
modNull = lm(weightloss ~ 1, data = datMaxALL)
modFullest = lm(weightloss ~ OPG * Genome_copies_gFaeces*Variable, data = datMaxALL)
summary(modFullest)
modFull_red1 = lm(weightloss ~ OPG * Genome_copies_gFaeces+Variable, data = datMaxALL)
summary(modFull_red1)
modFull_red2 = lm(weightloss ~ OPG + Genome_copies_gFaeces*Variable, data = datMaxALL)
summary(modFull_red2)
modFull_red3 = lm(weightloss ~ OPG * Variable + Genome_copies_gFaeces, data = datMaxALL)
summary(modFull_red3)
anova(modFullest,modFull_red1)
anova(modFullest,modFull_red2)
anova(modFullest,modFull_red3)
AIC(modFullest, modFull_red1, modFull_red2, modFull_red3)
#We go on comapring against modFUll_red3
modred_red_1 = lm(weightloss ~ OPG + Variable + Genome_copies_gFaeces, data = datMaxALL)
summary(modred_red_1)
anova(modFull_red3, modred_red_1)
modOPG = lm(weightloss ~ OPG + Variable, data = datMaxALL)
summary(modOPG)
modOPG_Int = lm(weightloss ~ OPG * Variable, data = datMaxALL)
summary(modOPG_Int)
modGenome = lm(weightloss ~  Genome_copies_gFaeces + Variable, data = datMaxALL)
summary(modGenome)
modGenome_Int = lm(weightloss ~  Genome_copies_gFaeces * Variable, data = datMaxALL)
summary(modGenome_Int)
anova(modred_red_1, modOPG)
anova(modred_red_1, modGenome)
AIC(modOPG, modGenome, modOPG_Int,modGenome_Int,modred_red_1)
#modred_red_1 is the best
library(ggeffects)
pred <- ggpredict(modred_red_1,terms=c("Genome_copies_gFaeces","OPG","Variable"), ci.lvl = NA,add.data = TRUE)
ggplot(pred, aes(x = x, y = predicted, colour = group)) +
stat_smooth(method = "lm", se = FALSE) +
facet_wrap(~facet) +
#geom_point(aes())+ #add raw data argument
labs(
y = get_y_title(pred),
x = get_x_title(pred),
colour = get_legend_title(pred)
)
plot(pred, rawdata = TRUE, dot.alpha = 0.9)
modred_red_1 = lm(weightloss ~ OPG + Variable + Genome_copies_gFaeces, data = datMaxALL)
summary(modred_red_1)
modFull_red1 = lm(weightloss ~ OPG * Genome_copies_gFaeces, data = datMaxALL)
summary(modFull_red1)
modFull_red1 = lm(weightloss ~ OPG * Genome_copies_gFaeces+Variable, data = datMaxALL)
summary(modFull_red1)
modGenome_Int = lm(weightloss ~  Genome_copies_gFaeces, data = datMaxALL)
summary(modGenome_Int)
modGenome_Int = lm(weightloss ~  Genome_copies_gFaeces * Variable, data = datMaxALL)
summary(modGenome_Int)
ggplot(pred, aes(x = x, y = predicted, colour = group)) +
stat_smooth(method = "lm", se = FALSE) +
facet_wrap(~facet) +
#geom_point(aes())+ #add raw data argument
labs(
y = get_y_title(pred),
x = get_x_title(pred),
colour = get_legend_title(pred)
)
ggplot(pred, aes(x = x, y = predicted, colour = group)) +
stat_smooth(method = "lm", se = FALSE) +
facet_wrap(~facet) +
#geom_point(aes())+ #add raw data argument
labs(
y = get_y_title(pred),
x = get_x_title(pred),
colour = get_legend_title(pred))+
theme(bw)
ggplot(pred, aes(x = x, y = predicted, colour = group)) +
stat_smooth(method = "lm", se = FALSE) +
facet_wrap(~facet) +
#geom_point(aes())+ #add raw data argument
labs(
y = get_y_title(pred),
x = get_x_title(pred),
colour = get_legend_title(pred))+
theme_bw()
plot(pred, rawdata = TRUE, dot.alpha = 0.9)
AIC(modOPG, modGenome, modOPG_Int,modGenome_Int,modred_red_1)
modGenome = lm(weightloss ~  Genome_copies_gFaeces + Variable, data = datMaxALL)
summary(modGenome)
modGenome = lm(weightloss ~  Genome_copies_gFaeces + Variable, data = datMaxALL)
summary(modGenome)
install.packages("stargrazer")
install.packages("stargazer")
stargazer(modred_red_1, modGenome)
library(stargazer)
stargazer(modred_red_1, modGenome)
help(stargazer)
stargazer(modred_red_1, modGenome, modOPG, type = "html")
stargazer(modred_red_1, modGenome, modOPG, type = "html", out ="my_model.html")
get wd
getwd
getwd()
datMaxALL$Genome_copies_gFaeces/(10^6)
dataMaxALL <- datMaxALL$Genome_copies_gFaeces/(10^6)
datMaxALL$Genome_copies_gFaeces <- datMaxALL$Genome_copies_gFaeces/(10^6)
datMaxALL$OPG <- datMaxALL$OPG/(10^6)
modred_red_1 = lm(weightloss ~ OPG + Variable + Genome_copies_gFaeces, data = datMaxALL)
summary(modred_red_1)
AIC(modOPG, modGenome, modOPG_Int,modGenome_Int,modred_red_1)
stargazer(modred_red_1, modGenome, modOPG, type = "html",
title="Linear Models Predicting Weight Loss",
keep.stat=c("aic", "rsq", "n"), omit.table.layout="n")
stargazer(modred_red_1, modGenome, modOPG, type = "html", out = "weightloss_model.html"
title="Linear Models Predicting Weight Loss",
keep.stat=c("aic", "rsq", "n"), omit.table.layout="n")
stargazer(modred_red_1, modGenome, modOPG, type = "html", out = "weightloss_model.html",
title="Linear Models Predicting Weight Loss",
keep.stat=c("aic", "rsq", "n"), omit.table.layout="n")
stargazer(modred_red_1, modGenome, modOPG, type = "html", out = "weightloss_model.html",
title="Linear Models Predicting Weight Loss",
keep.stat=c("aic"), omit.table.layout="n")
stargazer(modred_red_1, modGenome, modOPG, type = "html", out = "weightloss_model.html",
title="Linear Models Predicting Weight Loss")
datMaxALL$OPG <- datMaxALL$OPG*(10^6)
datMaxALL$OPG <- datMaxALL$OPG/(10^3)
modred_red_1 = lm(weightloss ~ OPG + Variable + Genome_copies_gFaeces, data = datMaxALL)
AIC(modOPG, modGenome, modOPG_Int,modGenome_Int,modred_red_1)
stargazer(modred_red_1, modGenome, modOPG, type = "html", out = "weightloss_model.html",
title="Linear Models Predicting Weight Loss")
modred_red_1 = lm(weightloss ~ OPG + Variable + Genome_copies_gFaeces, data = datMaxALL)
summary(modred_red_1)
modGenome = lm(weightloss ~  Genome_copies_gFaeces + Variable, data = datMaxALL)
summary(modGenome)
modOPG = lm(weightloss ~ OPG + Variable, data = datMaxALL)
summary(modOPG)
anova(modred_red_1, modOPG)
anova(modred_red_1, modGenome)
stargazer(modred_red_1, modGenome, modOPG, type = "html", out = "weightloss_model.html",
title="Linear Models Predicting Weight Loss")
datMaxALL$OPG <- datMaxALL$OPG*(10^3)
datMaxALL$OPG <- datMaxALL$OPG/(10^6)
modred_red_1 = lm(weightloss ~ OPG + Variable + Genome_copies_gFaeces, data = datMaxALL)
summary(modred_red_1)
modGenome = lm(weightloss ~  Genome_copies_gFaeces + Variable, data = datMaxALL)
summary(modGenome)
modOPG = lm(weightloss ~ OPG + Variable, data = datMaxALL)
summary(modOPG)
anova(modred_red_1, modOPG)
anova(modred_red_1, modGenome)
stargazer(modred_red_1, modGenome, modOPG, type = "html", out = "weightloss_model.html",
title="Linear Models Predicting Weight Loss")
modred_red_1 = lm(weightloss ~ OPG + Variable + Genome_copies_gFaeces, data = datMaxALL)
summary(modred_red_1)
modGenome = lm(weightloss ~  Genome_copies_gFaeces + Variable, data = datMaxALL)
summary(modGenome)
modOPG = lm(weightloss ~ OPG + Variable, data = datMaxALL)
summary(modOPG)
anova(modred_red_1, modOPG)
anova(modred_red_1, modGenome)
stargazer(modred_red_1, modGenome, modOPG, type = "html", out = "weightloss_model.html",
title="Linear Models Predicting Weight Loss")
anova(modred_red_1, modOPG)
anova(modred_red_1, modGenome)
modred_red_1$AIC <- AIC(modred_red_1)
modGenome$AIC <- AIC(modGenome)
modOPG$AIC <- AIC(modOPG)
stargazer(modred_red_1, modGenome, modOPG, type = "html", out = "weightloss_model.html",
title="Linear Models Predicting Weight Loss",
keep.stat=c("aic"), omit.table.layout="n")
challenge_DNA%>%
filter(dpi%in%c("0","1","2","3","4", "5","6", "7", "8"))%>%
dplyr::select(EH_ID, dpi, Genome_copies_gFaeces)%>%
dplyr::arrange(EH_ID)%>%
dplyr::arrange(dpi)%>% ##for comparison
filter(!is.na(Genome_copies_gFaeces))%>%
wilcox_test(Genome_copies_gFaeces ~ dpi, alternative = "two.sided", ref.group = "0")%>%
adjust_pvalue(method = "bonferroni") %>%
add_significance()%>%
add_xy_position(x = "dpi")-> stats.test
##Save statistical analysis
x <- stats.test
x$groups<- NULL
write.csv(x, "Tables/Secondary_Infections/Genome_copies_gFaeces_DPI_Comparison_challanged.csv")
stats.test%>%
dplyr::mutate(y.position = log10(y.position))%>%
dplyr::mutate(dpi = c("1","2","3","4", "5","6", "7", "8"))-> stats.test
#challenge.DNA[,'dpi'] <- as.factor(as.character(challenge.DNA[,'dpi']))
#Let me try to plot
challenge_DNA%>%
dplyr::select(EH_ID, dpi, Genome_copies_gFaeces, Infection)%>%
filter(!is.na(Genome_copies_gFaeces))%>%
filter(!is.na(Infection))%>%
ggplot(aes(factor(dpi), Genome_copies_gFaeces+1))+ #remove colour=dpi to get black outline boxplot #replace fill with colour for no balck outline and coloured boxplot
stat_boxplot(geom = "errorbar", width=0.4, size=1, color="#929292") +
geom_boxplot(fill = "white",color="#929292")+
scale_fill_manual(values=c("#6CB4EE", "#0066B2", "#89CFF0","#318CE7","#1E90FF","#4D4DFF","#3457D5","#00BFFF","#2A52BE","#0CAFFF","#6495ED","#1F75FE")) +
geom_point(aes(shape=Infection,fill = factor(dpi)), position=position_jitter(0.05), size=3.0,)+
scale_color_manual(values=c("#6CB4EE", "#0066B2", "#89CFF0","#318CE7","#1E90FF","#4D4DFF","#3457D5","#00BFFF","#2A52BE","#0CAFFF","#6495ED","#1F75FE"))+
scale_shape_manual(values = c(24, 21))+
labs(x="Day Post Infection", y="log10 (Genome copies/g Faeces + 1) (qPCR)")+
labs(tag= "a", shape= "qPCR results of E88 Secondary Infection")+
scale_y_log10(breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))+
geom_line(aes(group = EH_ID), color= "gray", alpha= 0.6)+
theme_bw()+
guides(colour="none")+
guides(fill="none")+
theme(text = element_text(size=13), axis.title.x = element_blank(), legend.position = "top")+
annotation_logticks(sides = "l")+
stat_pvalue_manual(stats.test, label= "p.adj.signif", x= "dpi", y.position = 100000000000) ->B
print(B)
#pdf(file = "E64_Chall_test_1.pdf")
#print(A)
#dev.off()
pdf(file = "Figure_challnege.pdf", width = 10, height = 15)
grid.arrange(A,B,C)
dev.off()
