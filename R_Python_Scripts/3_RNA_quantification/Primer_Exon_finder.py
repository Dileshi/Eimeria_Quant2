import re

#find first exon-intron junction
def text_match(text):
        patterns = '([A-Z]{1})+[a-z]'
        x = re.search(patterns, text)
        return print (x)
    
#find first intron-exon junction  
def text_match2(text):
        patterns2 = '([a-z]{1})+[A-Z]'
        y = re.search(patterns2, text)
        return print (y)
 
#primer conditions:
    #50% to 60% GC content
    #primer Tm(max) =60
 
#exampe: text_match2("cgAT")
        #<re.Match object; span=(0, 3), match='cgA'>

#find position of exon-exon junction
String = "ATGGCGCGCCCTGAGCATAGCGACGCGTCGTCAGATGGGGATGCTTTAGGCGGCAGGGCGAAGCGCTCACGGCATTCTTCTGATGAGCAACTAAAGGATCAGCGGAGGAGATTAAACGTTCCGCAAGATGCCAGCCAAATTGTTGCCTCACCAGCTGGAAGTGCGCAGCACACCCCAGGCAGCGGCGATGACTCTGGCACCGCATCCCGAACAATCCAGCATGCTGTTGGCGATCTAGCTGGACTGGATGACAACCTCATGGCGCTGCTTCTTCCAGATGGCTTCGGTGTTGAACGCATTGCGGCGGATGACGCTTCAACCGGCTCTCCAGAATCGTCACGAGAGCTTTTGCCCGTTGCCGCCACTGTGGCAGCGGCAGAGACCCCCGAAGTGCGCGTGCAAAATGTCATTGCCAGCGGACGGGTGGTGGTGGAGGGGCGCCGCAGTGCTTCTTTGGATTTGCGGCGCATCGCTGTAAGCTGCCGGCTTGCGGAATACAACCCCCGCAAAATCAATGCATGCATCGTGAGGCTGCGGAAGCCAAAGTGCACGGGTCTCATATTCCGATCGGGGAGAGTGATGGTGACGGGGGCTCAGAGCGAGGACGCGGCCCTTCGTGCGGCGCGTCTGCTGGTCAGAATGCTGCAGGCTGTGCTGAGCCCCCAGCCGCCTGATGTGGGAGGCACACCAAAGCGAGCTGCCTTGCCAGCAGAAGCGGCAAGCAGATCAGACAGCGGCTGCTCGAATGCAGTAAACACAACAGGCTCCCAAAAGCTGACGCCGACCCAGCACCCTGCCATTGCGGATGGCGAGGCGATTGCATCAGACTATGGGACCTCCAAAAGTCCAGAGAGCGAAGAGCGACTTGCCATGGGCGATTCAATGACTCCTCAGAGTGTCGATTCTGCCGTTCTGATGAGGCAAAGGGATGCATCTGTTTCTCCAAGTGACGCACACAAAGGCAATTTCGCTAGCATTCGGCTTACACAATTTGCAGTGGAAAATATCGTCGCTACGGCGGACTGCGGCCTTCCAGTGAGGCTCGAAGGTCTCGCCTTCGACCATAAGGAATTCTGCAGCTATGAACCCGAACTCTTTGCTGGGCTTGTGTATCGGTACAGCCCGACACCCTCCTTAAAAGCAGTCTTGCTGATCTTCGTGAGCGGCAAAGTTGTTATCACAGGCTGCAAGAGCGCTGCAGAGATCCAGGAGGTTTTCCACTCCTTCTTCCCCGTCCTCCTCAAGTACCATACGTGA    "
Z = re.search("GTGTTGAACGCATTGCGGCGGATGACGCTTCAAC", String).start()
print ("Position:", Z)    

#EXAMPLE:
#String = "GAGgtagAACGA"
#Z = re.search("AAC", String).start()
#print ("Position:", Z)    
#>>7   
    
    
    

